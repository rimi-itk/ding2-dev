<?php
/**
 * @file
 * Implements a proxy to rewrite online material urls to library specific urls.
 */

/**
 * Implements hook_menu().
 */
function ting_proxy_menu() {
  $items = array();

  // Administration UI.
  $items['admin/config/ting/proxy'] = array(
    'title' => 'Proxy settings',
    'description' => 'Ting Proxy settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_proxy_settings_form'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting_proxy.admin.inc',
    'file path' => drupal_get_path('module', 'ting_proxy') . '/includes',
  );

  return $items;
}

/**
 * Implements of hook_element_info().
 *
 * It defines a new form element named ting_proxy_hostname.
 *
 * It calls the theme function theme_ting_proxy_hostname, if not defined
 * no elements will be displayed.
 *
 */
function ting_proxy_element_info() {
  $types = array();

  $types['ting_proxy_hostname'] = array(
    '#input' => TRUE,
    '#process' => array('ting_proxy_hostname_element_process'),
    '#element_validate' => array('ting_proxy_hostname_element_validate'),
  );

  return $types;
}

/**
 * Implements hook_theme().
 *
 * Defines the new form element "ting_proxy_hostname" theme function. Which is
 * required by hook_elements.
 */
function ting_proxy_theme() {
  return array(
    'ting_proxy_hostname' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Theme function to format the custom form element (ting_proxy_hostname).
 */
function theme_ting_proxy_hostname($element) {
  return theme('form_element', $element);
}

/**
 * Process callback to expand our form element into several fields.
 */
function ting_proxy_hostname_element_process($element, $form_state) {
  $element['#tree'] = TRUE;

  $element['hostname'] = array(
    '#type' => 'textfield',
    '#title' => t('Hostname'),
    '#required' => TRUE,
    '#size' => 30,
    '#default_value' => ((isset($element['#value']['hostname'])) ? $element['#value']['hostname'] : ''),
    '#description' => t('Enter hostname, e.g. <em>magazine.example.com</em>. Do not include the <em>http://</em> prefix.'),
    '#attributes' => array('class' => array('url-text-field')),
  );

  // Create collapsible field set, because only a small subset will use these
  // options.
  $element['expression'] = array(
    '#type' => 'fieldset',
    '#title' => t('Replacement'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $element['expression']['regex'] = array(
    '#type' => 'textfield',
    '#title' => t('Regular expression'),
    '#size' => 30,
    '#default_value' => isset($element['#value']['expression']) ? $element['#value']['expression']['regex'] : '',
    '#description' => t('Use regular expression to substitut parts of the url, e.g. "<em>%regex</em>".', array('%regex' => '/bib\w{5,6}/')),
  );

  $element['expression']['replacement'] = array(
    '#type' => 'textfield',
    '#title' => t('Replacement'),
    '#size' => 30,
    '#default_value' => isset($element['#value']['expression']) ? $element['#value']['expression']['replacement'] : '',
    '#description' => t('The replacement value for the regular expression.'),
  );

  // Enables the option of not prefixing the url.
  // In some cases it's not needed and replacements still work.
  $element['disable_prefix'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do not use proxy prefix for this hostname'),
    '#default_value' => (isset($element['#value']['disable_prefix']) ? $element['#value']['disable_prefix'] : FALSE),
  );

  // Placeholder to mark proxies for removal.
  $element['removed'] = array(
    '#type' => 'hidden',
    '#default_value' => 0,
    '#attributes' => array('class' => array('removed')),
  );

  $element['remove'] = array(
    '#type' => 'button',
    '#value' => t('Remove'),
    '#attributes' => array('class' => array('remove')),
  );

  return $element;
}

/**
 * Our element's validation function.
 */
function ting_proxy_hostname_element_validate($element, &$form_state) {
  return $element;
}

/**
 * Implements hook_ting_online_url_alter().
 *
 * Hooks into the url and rewrites it based on the configuration.
 */
function ting_proxy_ting_online_url_alter(&$url) {
  $proxy = variable_get('ting_proxy', array());

  // Alter the url if we have a valid proxy configuration,
  if (isset($proxy['prefix']) && $proxy['prefix'] &&
      isset($proxy['hostnames']) && is_array($proxy['hostnames'])) {
    $url = ting_proxy_rewrite_download_url($url, $proxy['prefix'], $proxy['hostnames']);
  }
}

/**
 * Rewrite the URL of external restricted-access resources.
 *
 * This allow access to the resources through the library's proxy server.
 *
 * @param string $url
 *   The url to rewrite
 * @param string $proxy_url
 *   The url to the proxy server to prepend to the url
 * @param array $hostnames
 *   Array of hostname configurations containing keys
 * 	   - hostname: The hostname for which the configuration applies in the
 *       format www.example.com
 *     - expression: An array with a regex and a replacement to support
 *       replacing values in the url e.g. replace /librarycode/ with /123456/
 *     - disable_prefix: Do not prefix the url with the proxy url
 *
 * @return string
 *   The rewritten url.
 */
function ting_proxy_rewrite_download_url($url, $proxy_url, $hostnames) {
  $host = parse_url($url, PHP_URL_HOST);

  // Search host names (can this be optimized ? yes - save data in other format).
  foreach ($hostnames as $config) {
    if ($host == $config['hostname']) {
      // Rewrite/convert url using regex.
      if ((isset($config['expression']['regex']) && !empty($config['expression']['regex'])) &&
          (isset($config['expression']['replacement']) && !empty($config['expression']['replacement']))) {
        $url = preg_replace($config['expression']['regex'],
                            $config['expression']['replacement'],
                            $url);
      }

      // Add prefix, if chosen.
      if (!$config['disable_prefix']) {
        // The URL is not encoded as it's send on to online resources proxies
        // (ezproxy), which fails if the url is encoded.
        $url = $proxy_url . $url;
      }

      // Exit the foreach loop.
      break;
    }
  }

  return $url;
}
