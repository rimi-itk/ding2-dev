<?php
/**
 * @file
 * Code for the Ding example content events feature.
 */

include_once 'ding_example_content_events.features.inc';

/**
 * Implements hook_enable().
 */
function ding_example_content_events_enable() {
  $items = array();

  // Define terms for the event category.
  $vocab = taxonomy_vocabulary_machine_name_load('event_category');
  $items[$vocab->vid] = array(
    'BÃ¸rn',
    'Foredrag & debat',
    'Internet & undervisning',
    'Litteratur',
    'Musik',
    'Udstilling',
  );

  // Define terms for the event target.
  $vocab = taxonomy_vocabulary_machine_name_load('event_target');
  $items[$vocab->vid] = array(
    'For bÃ¸rn',
    'For unge',
    'For voksne',
    'For Ã¦ldre',
    'For alle',
    'For studerende',
  );

  // Save terms in the database.
  foreach ($items as $vid => $terms) {
    foreach ($terms as $term) {
      taxonomy_term_save((object) array(
        'name' => $term,
        'vid' => $vid,
        'format' => 'ding_wysiwyg',
      ));
    }
  }
}

/**
 * Implements hook_node_export_import_alter().
 *
 * Ensure that (themes) groups has taxonomy term.
 */
function ding_example_content_events_node_export_import_alter(&$nodes, $format, $save) {
  // Load the taxonomy.
  $vocabulary = taxonomy_vocabulary_machine_name_load('event_category');
  $categories = taxonomy_get_tree($vocabulary->vid);

  $vocabulary = taxonomy_vocabulary_machine_name_load('event_target');
  $targets = taxonomy_get_tree($vocabulary->vid);

  $vocabulary = taxonomy_vocabulary_machine_name_load('ding_content_tags');
  $tags = taxonomy_get_tree($vocabulary->vid);

  foreach ($nodes as $node) {
    if (in_array($node->type, array('ding_event'))) {
      // Use a metadata wrapper to access the data.
      $wrapper = entity_metadata_wrapper('node', $node);

      // Set the new taxonomy id (random).
      $value = $wrapper->field_ding_event_category->value();
      if (!empty($value)) {
        $wrapper->field_ding_event_category->set($categories[array_rand($categories)]->tid);
      }
      $value = $wrapper->field_ding_event_target->value();
      if (!empty($value)) {
        $wrapper->field_ding_event_target->set($targets[array_rand($targets)]->tid);
      }

      // Set tags (random). It do not use the entity wrapper here to get values
      // as it will load the entity/term, which may not exists, which the will
      // result in an error.
      if (!empty($node->field_ding_event_tags)) {
        $random_tags = array();
        for ($i = 0; count($node->field_ding_event_tags[LANGUAGE_NONE]) > $i; $i++) {
          $tag = $tags[array_rand($tags)]->tid;
          if (!in_array($tag, $random_tags)) {
            $random_tags[] = $tag;
          }
          else {
            $i--;
          }
        }
        $wrapper->field_ding_event_tags->set($random_tags);
      }

      // Set OG group id (library). Do not use the entity wrapper here to get
      // values as it will try to load the entity, which may not exists.
      if (!empty($node->og_group_ref)) {
        $group = $node->og_group_ref[LANGUAGE_NONE][0]['target_id'];
        $nid = ding_example_content_groups_ref_translate($group, 'ding_library');
        $wrapper->og_group_ref->set(array($nid));
      }

      // Set OG group id (groups).
      if (!empty($node->ding_event_groups_ref)) {
        $group = $node->ding_event_groups_ref[LANGUAGE_NONE][0]['target_id'];
        $nid = ding_example_content_groups_ref_translate($group, 'ding_group');
        $wrapper->ding_event_groups_ref->set(array($nid));
      }
    }
  }
}
