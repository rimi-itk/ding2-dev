{"version":3,"sources":["webpack:///./src/core/mount.js","webpack:///./src/components/store.jsx"],"names":["initial","Store","children","store","persistor","mount","context","querySelectorAll","forEach","container","appName","dataset","ddbApp","app","window","ddbReact","apps","innerHTML","render","createElement","withErrorBoundary","ErrorBoundary","unmount","reset","purge","setToken"],"mappings":"yIAmEQA,E,+FCnDOC,EAVD,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACZ,kBAAC,IAAD,CAAUC,MAAOA,KACf,kBAAC,IAAD,CAAaC,UAAWA,KAAYF,K,ijBDOxC,SAASG,EAAMC,GACRA,GACiBA,EAAQC,iBAAiB,kBAqBjCC,SAnBd,SAAkBC,GAAW,UACrBC,EAAUD,aAAH,YAAGA,EAAWE,eAAd,aAAG,EAAoBC,OAC9BC,EAAG,UAAGC,OAAOC,gBAAV,uBAAG,EAAiBC,YAApB,aAAG,EAAwBN,GAEfG,IAAQJ,EAAUQ,WAErCC,iBACEC,wBACElB,EACA,GACAkB,wBAAcC,4BAAkBP,EAAKQ,KAAxB,KACRZ,EAAUE,WAGjBF,MAaR,SAASa,EAAQhB,GACVA,GACiBA,EAAQC,iBAAiB,kBAMjCC,SAJd,SAAoBC,GACYA,EACRQ,UAAY,MAUtC,SAASM,IACP,OAAOnB,IAAUoB,QAIXxB,EAAU,CACdgB,KAAM,GACNS,aACApB,QACAiB,UACAC,SAEFT,OAAOC,SAAP,KACMD,OAAOC,UAAY,GADzB,GAEKf,K","file":"mount.js","sourcesContent":["import { createElement } from \"react\";\nimport { render } from \"react-dom\";\nimport { withErrorBoundary } from \"react-error-boundary\";\n\nimport ErrorBoundary from \"../components/alert/alert\";\nimport { setToken } from \"./token\";\nimport Store from \"../components/store\";\nimport { persistor } from \"./store\";\n\n/**\n * We look for containers and corresponding applications.\n * Thereafter we mount them if a corresponding container and application can be found.\n *\n * @param {HTMLElement} context - The HTML element you want to search for app containers in.\n */\nfunction mount(context) {\n  if (!context) return;\n  const appContainers = context.querySelectorAll(\"[data-ddb-app]\");\n\n  function mountApp(container) {\n    const appName = container?.dataset?.ddbApp;\n    const app = window.ddbReact?.apps?.[appName];\n    // Ensure that the application exists and that the container isn't already populated.\n    const isValidMount = app && !container.innerHTML;\n    if (isValidMount) {\n      render(\n        createElement(\n          Store,\n          {},\n          createElement(withErrorBoundary(app, ErrorBoundary), {\n            ...container.dataset\n          })\n        ),\n        container\n      );\n    }\n  }\n\n  appContainers.forEach(mountApp);\n}\n\n/**\n * If you want to remove all ddb apps in a certain context.\n *\n * @param {HTMLElement} context - The HTML element you want to search for app containers in.\n */\nfunction unmount(context) {\n  if (!context) return;\n  const appContainers = context.querySelectorAll(\"[data-ddb-app]\");\n\n  function unMountApp(container) {\n    const appContainerToUnmount = container;\n    appContainerToUnmount.innerHTML = \"\";\n  }\n  appContainers.forEach(unMountApp);\n}\n\n/**\n * Resets any stored state of all components.\n *\n * @returns {Promise<any>}\n */\nfunction reset() {\n  return persistor.purge();\n}\n\nfunction init() {\n  const initial = {\n    apps: {},\n    setToken,\n    mount,\n    unmount,\n    reset\n  };\n  window.ddbReact = {\n    ...(window.ddbReact || {}),\n    ...initial\n  };\n}\n\n// Inject into the global namespace for third party access.\ninit();\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"../core/store\";\n\nconst Store = ({ children }) => (\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>{children}</PersistGate>\n  </Provider>\n);\n\nStore.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default Store;\n"],"sourceRoot":""}